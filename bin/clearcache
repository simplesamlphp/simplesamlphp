#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace SimpleSAML\Bin;

require_once(__DIR__ . '/../vendor/autoload.php');
$baseDir = dirname(__FILE__, 2);
// Add library autoloader
require_once($baseDir . '/src/_autoload.php');

use SimpleSAML\Configuration;
use SimpleSAML\Error\CriticalConfigurationError;
use SimpleSAML\Utils\Config;

class ClearCache
{
    private array $enabledModules;

    public function __construct() {
        // Initialize the configuration
        $configObj = new Config();
        $configdir = $configObj->getConfigDir();
        Configuration::setConfigDir($configdir);
    }


    /**
     * Initialize the class and configurations.
     *
     * This method is used to set up the enabled modules configuration
     * and to ensure proper initialization of the environment before
     * performing any cache-clear operations.
     *
     * @return void
     */
    private function init(): void
    {
        try {
            $this->enabledModules = Configuration::getInstance()->getArray('module.enable');
        } catch (CriticalConfigurationError $e) {
            print "Error:configuration file not found" .  PHP_EOL;
            exit;
        }
    }


    /**
     * Clear the cache for enabled modules.
     *
     * This method iterates through the enabled modules and clears their cache
     * using the Symfony console command. If the command fails for any module,
     * an exception is thrown. A message is printed for every module whose
     * cache was successfully cleared.
     *
     * @throws \RuntimeException If cache clearing fails for any module.
     *
     * @return void
     */
    public function clear(): void
    {
        $this->init();
        foreach ($this->enabledModules as $module => $enabled) {
            if ($enabled) {
                $command = "php bin/console cache:clear --no-warmup -m " . escapeshellarg($module);
                exec($command, $output, $returnVar);

                if ($returnVar !== 0) {
                    throw new \RuntimeException(sprintf('Failed to clear cache for module "%s".', $module));
                }

                printf("Cache cleared for module: %s\n", $module);
            }

        }
    }
}

$clearCache = new ClearCache();
$clearCache->clear();
